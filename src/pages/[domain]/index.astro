---
import Card from '../../components/Card.astro';
import Layout from '../../layouts/Layout.astro';
// Fetch remotely...
const domains = [{
  domain: 'demo',
  title: "Demo Site",
  description: "An executive summary"
}, {
  domain: 'test',
  title: "test site",
  description: 'A test summary'
}]
const {domain} = Astro.params

const site = domains.find(site => {
  const subdomain = domain!.endsWith(`.${import.meta.env.PUBLIC_ROOT_DOMAIN}`) ? domain!.replace(`.${import.meta.env.PUBLIC_ROOT_DOMAIN}`, '') : null
  return subdomain === site.domain
})
if (!site) {
  return Astro.redirect("404")
}
---
<Layout title="Demo Site">
  <main>
    <h1><span class="text-gradient">{site.title}</span></h1>
    <p class="instructions">
      {site.description}
    </p>
    <ul role="list" class="link-card-grid">
      <Card href={`${Astro.url.protocol}//${import.meta.env.PUBLIC_ROOT_DOMAIN}`} title="Back Home" body="" />
    </ul>
  </main>
</Layout>

<style>
  main {
		margin: auto;
		padding: 1.5rem;
		max-width: 60ch;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
  .text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
  .instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
  .link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>